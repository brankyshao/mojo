 ~~ Licensed to the Apache Software Foundation (ASF) under one
 ~~ or more contributor license agreements.  See the NOTICE file
 ~~ distributed with this work for additional information
 ~~ regarding copyright ownership.  The ASF licenses this file
 ~~ to you under the Apache License, Version 2.0 (the
 ~~ "License"); you may not use this file except in compliance
 ~~ with the License.  You may obtain a copy of the License at
 ~~
 ~~   http://www.apache.org/licenses/LICENSE-2.0
 ~~
 ~~ Unless required by applicable law or agreed to in writing,
 ~~ software distributed under the License is distributed on an
 ~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~~ KIND, either express or implied.  See the License for the
 ~~ specific language governing permissions and limitations
 ~~ under the License.

 -----
 Basic Usage
 -----
 Stephen Connolly
 ------
 2009-08-21
 ------

Basic Usage

  Here is a basic example of using the plugin with the {{{http://maven.apache.org/plugins/maven-invoker-plugin/}Maven Invoker Plugin}}.

  You first off bind the <<<mock-repository:start>>> and <<<mock-repository:stop>>> goals to the
  <<<pre-integration-test>>> and <<<post-integration-test>>> phases of the project lifecycle, and then you bind
  <<<invoker:run>>> to the <<<integration-test>>> phase.

  Note: if you are using Maven Invoker 1.4 or newer, it is better to bind the <<<invoker:integration-test>>> goal
  to the <<<integration-test>>> phase and then bind the <<<invoker:verify>>> goal to the <<<verify>>> phase as
  this allows the orderly shutdown of the mock repository during the <<<post-integration-test>>> phase in the event
  of any failing integration tests.

+---+
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>mock-repository-maven-plugin</artifactId>
        <version>${pluginVersion}</version>
        <executions>
          <execution>
            <id>start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-invoker-plugin</artifactId>
        <version>1.3</version>
        <executions>
          <execution>
            <id>run-its</id>
            <phase>integration-test</phase>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
+---+

  We then put the <<<pom>>> files of the artifacts we want to host in the source directory (by default this is
  <<<src/mock-repo>>>), e.g.

+---+
pom.xml
src/
    main/
        java/
        resources/
    test/
        java/
        resources/
    it/
        it-001/
            pom.xml
            invoker.properties
            verify.bsh
        settings.xml
    mock-repo/
        dummy-api-1.0.pom
        dummy-api-1.1.pom
        dummy-api-1.1.jar
        dummy-api-1.1-sources.jar
        dummy-api-2.0.pom
        dummy-impl-1.0.pom
+---+

  In the above example, there are four <<<pom>>> files: <<<dummy-api-1.0.pom>>>, <<<dummy-api-1.1.pom>>>,
  <<<dummy-api-2.0.pom>>> and <<<dummy-impl-1.0.pom>>>

  Assuming that these <<<pom>>> files all use the groupId of <<<localdomain.localhost>>>, we will get the following
  remote repository created for us

+---+
localdomain/
    localhost/
        dummy-api/
            1.0/
                dummy-api-1.0.pom
                dummy-api-1.0.pom.md5
                dummy-api-1.0.pom.sha1
                dummy-api-1.0.jar
                dummy-api-1.0.jar.md5
                dummy-api-1.0.jar.sha1
                dummy-api-1.0-sources.jar
                dummy-api-1.0-sources.jar.md5
                dummy-api-1.0-sources.jar.sha1
            1.1/
                dummy-api-1.1.pom
                dummy-api-1.1.pom.md5
                dummy-api-1.1.pom.sha1
                dummy-api-1.1.jar
                dummy-api-1.1.jar.md5
                dummy-api-1.1.jar.sha1
                dummy-api-1.1-sources.jar
                dummy-api-1.1-sources.jar.md5
                dummy-api-1.1-sources.jar.sha1
            2.0/
                dummy-api-2.0.pom
                dummy-api-2.0.pom.md5
                dummy-api-2.0.pom.sha1
                dummy-api-2.0.jar
                dummy-api-2.0.jar.md5
                dummy-api-2.0.jar.sha1
                dummy-api-2.0-sources.jar
                dummy-api-2.0-sources.jar.md5
                dummy-api-2.0-sources.jar.sha1
            metadata.xml
            metadata.xml.md5
            metadata.xml.sha1
        dummy-impl/
            1.0/
                dummy-impl-1.0.pom
                dummy-impl-1.0.pom.md5
                dummy-impl-1.0.pom.sha1
                dummy-impl-1.0.jar
                dummy-impl-1.0.jar.md5
                dummy-impl-1.0.jar.sha1
                dummy-impl-1.0-sources.jar
                dummy-impl-1.0-sources.jar.md5
                dummy-impl-1.0-sources.jar.sha1
            metadata.xml
            metadata.xml.md5
            metadata.xml.sha1
+---+

  As we only provided real artifacts for <<<localdomain.localhost:dummy-api:1.1>>> all the remaining artifacts will be
  empty jar files.
  